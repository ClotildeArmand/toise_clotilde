import numpy as np
from scipy.interpolate import interp1d


class NSNS(object):
    def __init__(self, distance_mpc=10):
        self.E = np.array([369239.10729495314, 471060.7541983269, 642232.5422229343, 875603.9101412345, 1193776.6417144358, 1701254.2798525856, 2319447.8660758203, 3233072.0612452044, 4607459.627762563, 6281696.115744871, 8564308.594870234, 12205019.047848472, 17393405.23618779, 25342307.35791306, 36923910.72949531, 46074596.27762563, 65661030.18837678, 93573709.45630178, 142510267.03029963, 221898234.14589745, 337945100.02247363, 526203637.7863344, 733473817.0816785, 895206190.8580012, 1117061086.2750628, 1304321386.7190042, 1627565448.0267544, 1858791891.14656, 2122868422.1461933, 2319447866.07582, 2590964952.837032, 2830890538.5946875, 3025305457.102461, 3093033440.1975937, 3233072061.245211, 3455107294.592232, 3532457318.1710534, 3859565907.694077, 4124626382.901365, 4311370885.398944])
        self.fluence = np.array([0.0104649423956753, 0.0139552249709876, 0.0197720924098911, 0.0263665089873036, 0.0373566928019433, 0.0529278448569264, 0.0738619982207937, 0.1046494239567529, 0.1438449888287663, 0.2007389180054632, 0.2676896494295611, 0.3792690190732252, 0.5292784485692636, 0.7386199822079362, 1.046494239567528, 1.2742749857031337, 1.6992730039047417, 2.231948711017632, 3.1147346385956816, 3.909356382652734, 4.281332398719389, 3.909356382652734, 3.1622776601683777, 2.444319062637017, 1.8329807108324347, 1.374541620871332, 0.9131167633286495, 0.6744462874835755, 0.4981595048613271, 0.3679505646173879, 0.2557965818714741, 0.1575318673423516, 0.1078685241641837, 0.0749894209332457, 0.0513483290743755, 0.0356969884682607, 0.025195082772935, 0.0175154400428418, 0.012937254012808, 0.0101526390755205])
        self.interp = interp1d(np.log10(self.E), np.log10(self.fluence), bounds_error=False, fill_value="extrapolate")
        self.distance_factor = 10.**2/distance_mpc**2
        self.merger_timescale = 30 * 24 * 3600 # duration for which fluence is given / assume const in this timerange
    def __call__(self, E, *args, **kwargs):
        # Fang & Metzger
        # fluence from a single NSNS merger
        peryear = 1 / (3600 * 24 * 365)
        # factor of 3 for flavor, 2 for neutrino/antineutrino
        # 10**-12 standard units for toise
        fluence = 10**self.interp(np.log10(E))/ E**2 / 3 / 2  * self.distance_factor * peryear * self.merger_timescale
        return fluence


